Version 1.3.25 (In progress)
============================

01/11/2005: wsfulton
            [C#] New typemap called 'csconstruct'. The code in this typemaps was previously hard
            coded and could not be customised by a user. This typemap contains the code that is
            generated into a proxy class's constructor. The proxy class now contains a method
            called swigSetup() which does a lot of the initialisation work. This is necessary for
            a future change to fix the translation of C++ exceptions into C# exceptions.

            [Java] New typemap called 'javaconstruct'. The code in this typemaps was previously hard
            coded and could not be customised by a user. This typemap contains the code that is
            generated into a proxy class's constructor. Another typemap named 'javaconstruct_director'
            is used instead when the proxy class is a director class.

            [C#, Java] If a C++ class did not have a default constructor, a protected default constructor
            was automatically generated by SWIG. This seems is unnecessary and has been removed
            and thereby giving the user almost complete control over the generated code along with the
            new typemaps above.

Dec/19: mmatus
	- Fix typemap search, now the "out" typemap search is done as follows

	     int *Foo::foo(int bar)   ->  int *Foo::foo(int bar)
	                              ->  int *Foo::foo
	                              ->  int *foo(int bar)
	                              ->  int *foo
	                              ->  int *

           then, now you can be more specific, and define

	  /* apply only for  'Foo::foo' method */
          %typemap(out) int * Foo::foo(int *bar) ...; 

	  /* apply for all 'foo' functions/methods */
          %typemap(out) int * foo(int *bar) ...; 

          %inline {
            struct Foo {
	       int *foo(int *bar);
            };
          }
	  

Dec/15: mmatus
	- More fixes for templates and template default args.
	  See template_default.i for scary cases that now are 
	  supported, besides the already ugly STL/std cases.
	  
	- Cosmetics and more use of 'const' where it was implicit.
	- Other fixes for OSS, which is now working again with 1.3.25.
	
	  
