$Header$

This file describes the set of tags and attributes produced by the SWIG1.3 parser.

1. Common attribute names

These attribute names are common to every node in the parse tree and are
used to implement the tree structure itself.

Attribute name         Description
-------------------------------------------------------------
"tag"              -   Tag name of a parse tree node
"next"             -   Next node (sibling)
"prev"             -   Previous node (sibling)
"parent"           -   Parent node
"child"            -   First child node (is the start of a linked list)

2. Reserved attribute names

Attributes starting with a "-" are used internally by the parsed and should not be
used as attributes by any extension module.

3. General philosophy

In SWIG1.1, all SWIG directives were defined as parser rules.  This made for a rather
large and inflexible parsing module.  In this version, the parser has been greatly
reduced to a few very general purpose directives.   Older SWIG directives, in turn,
are then implemented as preprocessor macros.  For example, in SWIG1.3 the following
directive is used to insert code into part of the output:

     %insert(section) %{ code %}

Then, the following macros are used to emulate old behavior

#define %wrapper %insert("wrapper")
#define %init    %insert("init")
#define %runtime %insert("runtime")
... etc ...

Similarly, most old SWIG directives such as "%readonly", "%readwrite", and so forth have
been consolidated into a single "%pragma" directive.

By consolidating parser rules, the number of tags are reduced and language module 
implementation is simplified.

4. Namespaces

Swig directives are tagged as "swig:tagname".  
C/C++ declarations are tagged as "c:decl".

Motivation: Maybe I'll add other stuff someday like "fortran:decl".

5. Parse Tree nodes

The following list describes all of the possible nodes that can be
produced by the parser and their attributes (not including the common
attributes above).

5.1 SWIG Directives

tag        : "swig:scope"
syntax     : %scope(name) { statements }
attributes : "name"      - Scope name
             "child"     - attribute contains nodes within the scope.

tag        : "swig:module"
syntax     : %module idstring
attributes : "name"      -  Module name

tag        : "swig:constant"
syntax     : %constant name value;
attributes : "name"      -  Constant name
             "value"     -  Constant value
             "type"      -  Constant type     

tag        : "swig:file"
syntax     : %include filename
           : %extern filename
           : %import filename
attributes : "type"     -  File type ("include", "extern", "import")

tag        : "swig:insert"
syntax     : %insert(section) "filename"
             %insert(section) %{ code %}
             %{ code %}          Note: same as %insert("header") %{ code %}
             %inline %{ code %}  Note: same as %insert("header") %{ code %}
attributes : "section"       - Code section
             "filename"      - File to include (if given)
             "code"          - Code to include (if given)

tag        : "swig:pragma"
syntax     : %pragma name [ value ];
             %pragma(lang) name [ value ];


tag        : "swig:exception"
syntax     : %exception { code }
attributes : "code"          - Exception code

tag        : "swig:typemap"
syntax     : %typemap(method) type (parms) {
                 code 
             }
           | %typemap(method) type (parms) "code";

attributes : "method"        - Typemap method
             "code"          - Typemap code (if supplied)
             "type"          - Type
             "name"          - Typemap Name
             "parms"         - Parameter list
             "srcname"       - Source name (of another typemap)
             "srctype"       - Source type

Notes      : If code is not set, srcname and srctype may point to another typemap
             in which a copy is performed.
             If neither code nor srcname and srctype are set, then the typemap
             is deleted.


tag        : "swig:apply"
syntax     : %apply type name { parms }
attributes : "name"
             "type"
             "parms"

tag        : "swig:clear"
syntax     : %clear parms;
attributes : "parms"

tag        : "swig:addmethods"
syntax     : %addmethods [(name)] { statements }
attributes : "name"        - Class name (optional)

5.2 C/C++ Declarations

tag        : "c:function"
attributes : "name"        - Function name
             "type"        - Return type
             "parms"       - Parameters
	     "storage"     - Storage class
	     "code"        - Code 

tag        : "c:variable"
attributes : "name"        - Variable name
             "type"        - Variable type
             "storage"     - Storage class 
             "value"       - Value

tag        : "c:typedef"
attributes : "name"        - Typedef name
             "type"        - Typedef type

tag        : "c:enum"
attributes : "name"        - Enum name
             "child"       - Enum members

tag        : "c:enumvalue"
attributes : "name"        - Enum value name
             "value"       - Enum value


tag        : "c:class"
attributes : "name"        - Class name
             "bases"       - Base classes
             "classtype"   - { struct, class, union }
             "altname"     - Alternative name (from typedef)
             "namespace"   - Namespace attribute (used to get fully qualified names)
	     
tag        : "c:destructor"
attributes : "name"        - Destructor name

tag        : "c:classdecl"
attributes : "name"        - Class name

tag        : "c:access"
attributes : "name"        - { public, private, protected }


      










