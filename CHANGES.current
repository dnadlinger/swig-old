Version 1.3.32 (in progress)
============================

03/23/2007: wsfulton
            String copying patch from Josh Cherry reducing memory consumption by about 25%.

03/21/2007: wsfulton
            [Java] Apply patch #1631987 from Ulrik Peterson - bool INOUT typemaps 
            fail on big endian machines.

03/16/2007: wsfulton
            Fix seg fault given dodgy C++ code: namespace abc::def { }

03/16/2007: wsfulton
            [Java] Fixes so that ARRAYSOFCLASSES and ARRAYSOFENUMS in arrays_java.i can be applied
            to pointer types.

03/03/2007: olly
	    [PHP5] When we know the literal numeric value for a constant, use
	    that to initialise the const member in the PHP wrapper class.

03/02/2007: olly
	    [PHP5] Fix PHP wrapper code generated for certain cases of
	    overloaded forms with default arguments.

02/26/2007: efuzzyone
            [CFFI] Patch #1656395: fixed hex and octal values bug, thanks to Arthur Smyles.

02/22/2007: mgossage
            [Lua] Fixed bug in typemaps which caused derived_byvalue and rname test cases to fail.
	    Updated derived_byvalue.i to explain how to find and fix the problem

01/25/2007: wsfulton
            Fix #1538522 and #1338527, forward templated class declarations without a
            name for the templated class parameters, such as:

              template <typename, class> class X;

01/23/2007: mgossage
            [Lua] Patch #1640862: <malloc.h> replaced by <stdlib.h>
	    Patch #1598063 Typo in typemaps.i

01/22/2007: mgossage
            [Lua] Added a lua specific carrays.i which adds the operator[] support.
	    modified the main code to make it not emit all the class member functions & accessors
	    Note: C structs are created using new_XXX() while C++ classes use XXX() (should be standardised)
	    Updated test case: li_carrays
	    Updated the documentation.

01/12/2007: wsfulton
            [Php] Add support for newfree typemaps (sometimes used by %newobject)

01/12/2007: beazley
            New command line option -macroerrors.   When supplied, this will force
            the C scanner/parser to report proper location information for code contained
            inside SWIG macros (defined with %define).  By default, SWIG merely reports
            errors on the line at which a macro is used.  With this option, you
            can expand the error back to its source---something which may simplify
            debugging.

01/12/2007: beazley
            [Internals] Major overhaul of C/C++ scanning implementation.  For quite
            some time, SWIG contained two completely independent C/C++ tokenizers--
            the legacy scanner in CParse/cscanner.c and a general purpose scanner
            in Swig/scanner.c. SWIG still has two scanning modules, but the C parser
            scanner (CParse/cscanner.c) now relies upon the general purpose
            scanner found in Swig/scanner.c.  As a result, it is much smaller and
            less complicated.  This change also makes it possible to maintain all
            of the low-level C tokenizing in one central location instead of two
            places as before. 

            ***POTENTIAL FLAKINESS***
            This change may cause problems with accurate line number reporting
            as well as error reporting more generally. I have tried to resolve this 
            as much as possible, but there might be some corner cases.  
            
01/12/2007: mgossage
            [Lua] Added typemap throws for std::string*, typemap for SWIGTYPE DYNAMIC, 
	    changed the existing throws typemap to throw a string instead of making a copy of
	    the object (updating a few test cases to deal with the change).
	    fixed test case: dynamic_casts, exception_partial_info, li_std_string, size_t

01/03/2007: beazley
            [Internals].  Use of swigkeys.c/.h variables is revoked.  Please use
            simple strings for attribute names.

12/30/2006: beazley
            Internal API functions HashGetAttr() and HashCheckAttr() have been revoked.
            Please use Getattr() to retrieve attributes.  The function Checkattr() can
            be used to check attributes.  Note:  These functions have been revoked 
            because they only added a marginal performance improvement at the expense
            code clarity. 

12/26/2006: mgossage
            [Lua] Added more STL (more exceptions, map, size_t), 
	    fixed test case: conversion_ns_template.

12/21/2006: mgossage
            [Lua] Update to throw errors when setting immutables, 
	    and allowing user addition of module variables.

12/20/2006: wsfulton
            Fix typedef'd variable wrappers that use %naturalvar, eg, std::string.

12/14/2006: wsfulton
            [C#] Add std::wstring and wchar_t typemaps

12/14/2006: olly
	    [php] Fix bug #1613673 (bad PHP5 code generated for getters and
	    setters).

12/02/2006: wsfulton, John Lenz, Dave Beazley
            Move from cvs to Subversion for source control

11/30/2006: beazley
            Cleaned up swigwarnings.swg file not to use nested macro
            definitions.

11/12/2006: wsfulton
            [Java, C#] Fix for %extend to work for static member variables.

