Version 1.3.34 (in progress)
============================

01/31/2008: wsfulton
            Additions to the %types directive. Now the conversion / casting code can be
            overridden to some custom code in the %types directive, like so:

              %types(fromtype = totype) %{
                ... code to convert fromtype to totype and return ...
              %}

            The special variable $from will be replaced by the name of the parameter of the
            type being converted from. The code must return the totype cast to void *. Example:

              class Time;
              class Date;
              Date &Time::dateFromTime();

              %types(Time = Date) %{
                Time *t = (Time *)$from;
                Date &d = t->dateFromTime();
                return (void *) &d;
              %}

            resulting in the conversion / casting code looking something like:

              static void *_p_TimeTo_p_Date(void *x) {
                Time *t = (Time *)x;
                Date &d = t->dateFromTime();
                return (void *) &d;
              }

            This is advanced usage, please use only if you understand the runtime type system.

01/30/2008: mgossage
	    Small update to documentation in Typemaps.html, to warn about use of local 
	    variables in typemaps for multiple types.

01/25/2008: wsfulton
	    [Java] Fix bug reported by Kevin Mills in ARRAYSOFCLASSES typemaps where any
            changes made to an array element passed from Java to C are not reflected back
            into Java.

01/24/2008: mgossage
	    More updates to the configure script for detecting lua.
	    Also looks in /usr/include/lua*
	    Also changed typemaps.i not to check for NULL before freeing a pointer

01/21/2008: wsfulton
	    [Python] For STL containers, SWIG no longer attempts to convert from one
            STL container to another, eg from std::vector<int> to std::vector<double>
            or std::list<int> to std::vector<int> or even std::vector<Foo> to
            std::vector<Bar> as it previously did. In fact SWIG no longer attempts to
            convert any SWIG wrapped C++ proxy class that is also a Python sequence,
            whereas previously it would. Any non-SWIG Python sequence will still be
            accepted wherever an STL container is accepted. Overloaded methods using
            containers should be faster.

01/18/2008: wsfulton
	    [C#] Add 'directorinattributes' and 'directoroutattributes' typemap attributes
            for the imtype typemap. These should contain C# attributes which will
            be generated into the C# director delegate methods.

01/18/2008: olly
	    Fix handling of byte value 255 in input files on platforms where
	    char is signed (it was getting mapped to EOF).  Fixes SF#1518219.

01/16/2008: wsfulton
	    Fix template member variables wrapped by a smart pointer. Bug reported 
            by Robert Lupton.

01/14/2008: mgossage
	    Substantial changes to configure script for detecting lua.
	      Code can now link to liblua.a, liblua50.a or liblua51.a
	      It's also a lot neater now.

12/16/2007: wsfulton
	    [Perl] Backed out #1798728 - numbers can be passed to functions taking char *

12/16/2007: wsfulton
	    Fix #1832613 - Templates and some typedefs involving pointers or function pointers

12/12/2007: wsfulton
	    [Java] Fix #1632625 - Compilation errors on Visual C++ 6 when using directors.

12/12/2007: wsfulton
	    [Perl] Fix #1798728 - numbers can be passed to functions taking char *.

12/12/2007: wsfulton
	    Fix #1819847 %template with just one default template parameter 

              template<typename T = int> class Foo {...};
              %template(FooDefault) Foo<>;

12/12/2007: mgossage
	    [Lua] Small correction on Lua.html

12/09/2007: wsfulton
	    Apply patch #1838248 from Monty Taylor for vpath builds of SWIG.

12/08/2007: wsfulton
	    [Lua] Fixes to remove gcc-4.2 warnings

12/06/2007: wsfulton
	    Fix #1734415 - template template parameters with default arguments such as:

              template<typename t_item, template<typename> class t_alloc = pfc::alloc_fast >
                class list_t : public list_impl_t<t_item,pfc::array_t<t_item,t_alloc> > { ... };

12/04/2007: mgossage
	    [lua] Fix a bug in the class hierachy code, where the methods were not propagated, 
	    if the name ordering was in a certain order.
	    Added new example programs (dual, embed) and runtime tests for test-suite.

11/30/2007: wsfulton
	    Fix using statements using a base class method where the methods were overloaded.
            Depending on the order of the using statements and method declarations, these
            were previously generating uncompileable wrappers, eg:

              struct Derived : Base {
                virtual void funk();
                using Base::funk;
              };

